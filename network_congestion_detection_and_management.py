# -*- coding: utf-8 -*-
"""Network Congestion Detection and Management.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sdmrbCxbHy5jC_NNZtRCjvTG-yToChjD
"""

import psutil
import time
import matplotlib.pyplot as plt
import os

def get_network_stats():
    net_io = psutil.net_io_counters()
    return net_io.bytes_sent, net_io.bytes_recv

def get_latency(host="8.8.8.8"):
    response = os.popen(f"ping -c 1 {host}").read()
    latency = None
    if "time=" in response:
        latency = float(response.split("time=")[1].split()[0])
    return latency

def detect_congestion(sent_bytes, recv_bytes, latency, bandwidth_threshold=100000000, latency_threshold=100):
    congestion = False
    congestion_message = ""
    if sent_bytes > bandwidth_threshold or recv_bytes > bandwidth_threshold:
        congestion = True
        congestion_message += "High bandwidth usage detected.\n"
    if latency is not None and latency > latency_threshold:
        congestion = True
        congestion_message += f"High latency detected: {latency} ms.\n"
    return congestion, congestion_message


def prioritize_traffic():
    print("Prioritizing critical traffic...")
    time.sleep(2)
    print("Traffic prioritization done.")

def log_stats(sent_bytes, recv_bytes, latency, congestion_detected):
    with open("network_log.txt", "a") as log_file:
        log_file.write(f"Time: {time.ctime()}\n")
        log_file.write(f"Bytes Sent: {sent_bytes} Bytes\n")
        log_file.write(f"Bytes Received: {recv_bytes} Bytes\n")
        log_file.write(f"Latency: {latency} ms\n")
        log_file.write(f"Congestion Detected: {'Yes' if congestion_detected else 'No'}\n")
        log_file.write("-" * 40 + "\n")

def monitor_network():
    congestion_detected = False
    sent_bytes_prev, recv_bytes_prev = get_network_stats()

    while True:
        sent_bytes, recv_bytes = get_network_stats()
        latency = get_latency()

        sent_delta = sent_bytes - sent_bytes_prev
        recv_delta = recv_bytes - recv_bytes_prev

        congestion, congestion_message = detect_congestion(sent_bytes, recv_bytes, latency)

        if congestion:
            print("Network Congestion Detected!")
            print(congestion_message)
            prioritize_traffic()
            congestion_detected = True
        else:
            congestion_detected = False

        log_stats(sent_bytes, recv_bytes, latency, congestion_detected)

        sent_bytes_prev, recv_bytes_prev = sent_bytes, recv_bytes

        time.sleep(5)

def plot_network_usage():
    time_intervals = []
    sent_data = []
    recv_data = []

    start_time = time.time()

    for i in range(60):
        sent_bytes, recv_bytes = get_network_stats()
        time_intervals.append(time.time() - start_time)
        sent_data.append(sent_bytes)
        recv_data.append(recv_bytes)
        time.sleep(1)

    plt.plot(time_intervals, sent_data, label='Sent Data (Bytes)')
    plt.plot(time_intervals, recv_data, label='Received Data (Bytes)')
    plt.xlabel('Time (s)')
    plt.ylabel('Bytes')
    plt.title('Network Traffic Over Time')
    plt.legend()
    plt.show()

monitor_network()

